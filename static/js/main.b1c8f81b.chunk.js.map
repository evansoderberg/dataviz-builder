{"version":3,"sources":["components/csv/reader.jsx","components/data-options/index.jsx","components/visualizations/constants.js","components/visualizations/index.jsx","components/visualizations/LinePath.jsx","components/visualizations/ScatterPlot.jsx","components/visualizations/hooks.js","App.js","serviceWorker.ts","index.tsx"],"names":["PARSER_OPTIONS","header","dynamicTyping","skipEmptyLines","Reader","dispatch","useDispatch","cssClass","label","onFileLoaded","data","cleanedData","errors","meta","cleanData","dataKeys","Object","keys","type","value","parserOptions","Options","xAxis","useSelector","state","yAxis","lineChart","length","onChange","event","target","map","val","key","name","checked","MARGIN","top","right","bottom","left","TRANSFORM_X_AXIS","TRANSFORM_Y_AXIS","TRANSFORM_X_AXIS_LABLE","WIDTH","HEIGHT","DIMENSIONS","margin","width","height","FixedDimensionSvg","props","children","AxisLabels","className","transform","x","y","LinePath","xScale","yScale","xDomain","d3","d","yDomain","domain","lineGenerator","path","fill","stroke","strokeWidth","ScatterPlot","xAxisRef","useRef","yAxisRef","dimensions","range","xAxisComponent","scale","tickFormat","yAxisComponent","useEffect","current","call","useD3Scales","points","ref","i","cx","cy","r","style","sortedData","sort","a","b","lineChartComponent","store","createStore","action","AppInner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1c8f81b.chunk.js","sourcesContent":["import React from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./reader.css\";\n\nconst PARSER_OPTIONS = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true\n};\n\nconst cleanData = ({ data, errors, meta }) => {\n  return data;\n};\n\nconst Reader = () => {\n  const dispatch = useDispatch();\n\n  const onCSVData = data => {\n    const cleanedData = cleanData(data);\n    const dataKeys = Object.keys(cleanedData[0]);\n    dispatch({ type: \"SET_X_AXIS\", value: dataKeys[0] });\n    dispatch({ type: \"SET_Y_AXIS\", value: dataKeys[1] });\n    dispatch({ type: \"SET_CLEANED_DATA\", value: cleanedData });\n  };\n\n  return (\n    <CSVReader\n      cssClass=\"react-csv-input\"\n      label=\"Select a CSV File\"\n      onFileLoaded={onCSVData}\n      parserOptions={PARSER_OPTIONS}\n    />\n  );\n};\n\nexport default Reader;\n","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Options = () => {\n  const xAxis = useSelector(state => state.xAxis);\n  const yAxis = useSelector(state => state.yAxis);\n  const lineChart = useSelector(state => state.lineChart);\n  const dispatch = useDispatch();\n\n  const data = useSelector(state => state.cleanedData);\n\n  if (!data || !data.length) return null;\n  const dataKeys = Object.keys(data[0]);\n\n  const handleXChange = event => {\n    dispatch({ type: \"SET_X_AXIS\", value: event.target.value });\n  };\n\n  const handleYChange = event => {\n    dispatch({ type: \"SET_Y_AXIS\", value: event.target.value });\n  };\n\n  const handleLineChartToggle = event => {\n    dispatch({ type: \"TOGGLE_LINE_CHART\" });\n  };\n\n  return (\n    <div>\n      <label>\n        X Axis:\n        <select value={xAxis} onChange={handleXChange}>\n          {dataKeys.map(val => {\n            return (\n              <option key={`x-${val}`} value={val}>\n                {val}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n      <br />\n      <label>\n        Y Axis:\n        <select value={yAxis} onChange={handleYChange}>\n          {dataKeys.map(val => {\n            return (\n              <option key={`y-${val}`} value={val}>\n                {val}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n      <br />\n      <label>\n        Line Chart\n        <input\n          name=\"lineChart\"\n          type=\"checkbox\"\n          checked={lineChart}\n          onChange={handleLineChartToggle}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Options;\n","const WIDTH = 800;\nconst HEIGHT = 600;\nconst MARGIN = { top: 20, right: 20, bottom: 60, left: 100 };\nexport const RED = \"#ff0000\";\nexport const TRANSFORM_X_AXIS = `translate(0, ${HEIGHT - MARGIN.bottom})`;\nexport const TRANSFORM_Y_AXIS = `translate(${MARGIN.left}, 0)`;\nexport const TRANSFORM_X_AXIS_LABLE = `translate(${WIDTH / 2}, ${HEIGHT - 10})`;\n\nexport const DIMENSIONS = {\n  margin: MARGIN,\n  width: WIDTH,\n  height: HEIGHT\n};\n","import React from \"react\";\nimport { DIMENSIONS, TRANSFORM_X_AXIS_LABLE } from \"./constants\";\nimport \"./index.css\";\n\nexport const FixedDimensionSvg = props => {\n  return (\n    <svg width={DIMENSIONS.width} height={DIMENSIONS.height}>\n      {props.children}\n    </svg>\n  );\n};\n\nexport const AxisLabels = props => {\n  const { xAxis, yAxis } = props;\n  return (\n    <>\n      <text className=\"axisLable\" transform={TRANSFORM_X_AXIS_LABLE}>\n        {xAxis}\n      </text>\n      <text\n        className=\"axisLable\"\n        transform=\"rotate(-90)\"\n        x={0 - DIMENSIONS.height / 2}\n        y={30}\n      >\n        {yAxis}\n      </text>\n    </>\n  );\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { RED } from \"./constants\";\n\nconst LinePath = props => {\n  // Render a path calculated by d3.line, and scaled accordingly.\n  const { data, xAxis, yAxis, xScale, yScale } = props;\n\n  const xDomain = d3.extent(data, d => d[xAxis]);\n  const yDomain = d3.extent(data, d => d[yAxis]);\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  const lineGenerator = d3.line();\n  lineGenerator.x(d => xScale(d[xAxis]));\n  lineGenerator.y(d => yScale(d[yAxis]));\n  const path = lineGenerator(data);\n\n  return <path d={path} fill=\"none\" stroke={RED} strokeWidth=\"2\" />;\n};\n\nexport default LinePath;\n","import React, { useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { FixedDimensionSvg, AxisLabels } from \"./index\";\nimport { useD3Scales } from \"./hooks\";\nimport LinePath from \"./LinePath\";\nimport {\n  TRANSFORM_X_AXIS,\n  TRANSFORM_Y_AXIS,\n  RED,\n  DIMENSIONS\n} from \"./constants\";\n\nconst ScatterPlot = props => {\n  const { data, xAxis, yAxis, lineChart } = props;\n  const xAxisRef = useRef();\n  const yAxisRef = useRef();\n\n  const { xScale, yScale } = useD3Scales(xAxisRef, yAxisRef, data, DIMENSIONS);\n\n  let points = [];\n  if (data) {\n    const xDomain = d3.extent(data, d => d[xAxis]);\n    const yDomain = d3.extent(data, d => d[yAxis]);\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n\n    points = data.map(d => {\n      return {\n        x: xScale(d[xAxis]),\n        y: yScale(d[yAxis])\n      };\n    });\n  }\n\n  const lineChartComponent = () => {\n    if (!lineChart) return null;\n    const sortedData = data\n      ? data.sort((a, b) => d3.ascending(a[xAxis], b[xAxis]))\n      : [];\n    return (\n      <LinePath\n        data={sortedData}\n        xAxis={xAxis}\n        yAxis={yAxis}\n        xScale={xScale}\n        yScale={yScale}\n      />\n    );\n  };\n\n  return (\n    <FixedDimensionSvg>\n      <g ref={xAxisRef} transform={TRANSFORM_X_AXIS} />\n      <g ref={yAxisRef} transform={TRANSFORM_Y_AXIS} />\n      <g>\n        {points.map((d, i) => {\n          return (\n            <circle key={i} cx={d.x} cy={d.y} r=\"3\" style={{ fill: RED }} />\n          );\n        })}\n      </g>\n      {lineChartComponent()}\n      <AxisLabels xAxis={xAxis} yAxis={yAxis} />\n    </FixedDimensionSvg>\n  );\n};\n\nexport default ScatterPlot;\n","import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nexport function useD3Scales(xAxisRef, yAxisRef, data, dimensions) {\n  // Create linear scales from d3 api, and update when axis selection changes.\n  const { margin, width, height } = dimensions;\n  const xScale = d3.scaleLinear().range([margin.left, width - margin.right]);\n  const yScale = d3.scaleLinear().range([height - margin.bottom, margin.top]);\n  const xAxisComponent = d3\n    .axisBottom()\n    .scale(xScale)\n    .tickFormat(d => `${d}`);\n\n  const yAxisComponent = d3\n    .axisLeft()\n    .scale(yScale)\n    .tickFormat(d => `${d}`);\n\n  useEffect(() => {\n    d3.select(xAxisRef.current).call(xAxisComponent);\n    d3.select(yAxisRef.current).call(yAxisComponent);\n  }, [data, xAxisComponent, yAxisComponent, xAxisRef, yAxisRef]);\n\n  return { xScale, yScale };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport CSVReader from \"./components/csv/reader\";\nimport DataOptions from \"./components/data-options\";\nimport ScatterPlot from \"./components/visualizations/ScatterPlot\";\n// import { ScatterPlot } from \"./components/visualizations/d3-render\";\n\nimport { Provider, useSelector } from \"react-redux\";\n\nimport { createStore } from \"redux\";\n\nconst rootReducer = (\n  state = { xAxis: null, yAxis: null, lineChart: false, cleanedData: null },\n  action\n) => {\n  switch (action.type) {\n    case \"SET_X_AXIS\":\n      return { ...state, xAxis: action.value };\n    case \"SET_Y_AXIS\":\n      return { ...state, yAxis: action.value };\n    case \"SET_CLEANED_DATA\":\n      return { ...state, cleanedData: action.value };\n    case \"TOGGLE_LINE_CHART\":\n      return { ...state, lineChart: !state.lineChart };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nconst AppInner = () => {\n  const data = useSelector(state => state.cleanedData);\n  const xAxis = useSelector(state => state.xAxis);\n  const yAxis = useSelector(state => state.yAxis);\n  const lineChart = useSelector(state => state.lineChart);\n  return (\n    <div className=\"App\">\n      <CSVReader />\n      {data ? (\n        <div className=\"Viz-and-opts\">\n          <DataOptions />\n          <ScatterPlot\n            data={data}\n            xAxis={xAxis}\n            yAxis={yAxis}\n            lineChart={lineChart}\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <AppInner />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}