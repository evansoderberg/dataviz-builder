{"version":3,"sources":["components/csv/reader.jsx","components/data-options/index.jsx","components/visualizations/index.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["PARSER_OPTIONS","header","dynamicTyping","skipEmptyLines","Reader","dispatch","useDispatch","className","cssClass","label","onFileLoaded","data","cleanedData","errors","meta","cleanData","dataKeys","Object","keys","type","value","parserOptions","Options","xAxis","useSelector","state","yAxis","console","log","length","onChange","event","target","map","val","key","BarChart","xAxisSelection","item","svgRef","useRef","useEffect","svg","select","current","xScale","scaleBand","domain","index","range","padding","yScale","scaleLinear","min","max","colorScale","clamp","axisBottom","ticks","style","call","axisRight","selectAll","join","attr","bandwidth","on","enter","append","text","transition","remove","Fragment","ref","store","createStore","action","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d648b9e1.chunk.js","sourcesContent":["import React from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst PARSER_OPTIONS = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true\n};\n\nconst cleanData = ({ data, errors, meta }) => {\n  return data;\n};\n\nconst Reader = () => {\n  const dispatch = useDispatch();\n\n  const onCSVData = data => {\n    const cleanedData = cleanData(data);\n    const dataKeys = Object.keys(cleanedData[0]);\n    dispatch({ type: \"SET_X_AXIS\", value: dataKeys[0] });\n    dispatch({ type: \"SET_Y_AXIS\", value: dataKeys[1] });\n    dispatch({ type: \"SET_CLEANED_DATA\", value: cleanedData });\n  };\n\n  return (\n    <div className=\"container\">\n      <CSVReader\n        cssClass=\"react-csv-input\"\n        label=\"Select CSV with header\"\n        onFileLoaded={onCSVData}\n        parserOptions={PARSER_OPTIONS}\n      />\n      <p>and then open the console</p>\n    </div>\n  );\n};\n\nexport default Reader;\n","import React, { useContext, useState } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Options = () => {\n  const xAxis = useSelector(state => state.xAxis);\n  const yAxis = useSelector(state => state.yAxis);\n  const dispatch = useDispatch();\n\n  const data = useSelector(state => state.cleanedData);\n\n  console.log(\"xAxis\", xAxis);\n  console.log(\"yAxis\", yAxis);\n\n  if (!data || !data.length) return null;\n  const dataKeys = Object.keys(data[0]);\n  console.log(\"dataKeys\", dataKeys);\n\n  const handleXChange = event => {\n    dispatch({ type: \"SET_X_AXIS\", value: event.target.value });\n  };\n\n  const handleYChange = event => {\n    dispatch({ type: \"SET_Y_AXIS\", value: event.target.value });\n  };\n\n  return (\n    <div>\n      <label>\n        X Axis:\n        <select value={xAxis} onChange={handleXChange}>\n          {dataKeys.map(val => {\n            return (\n              <option key={`x-${val}`} value={val}>\n                {val}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n      <br />\n      <label>\n        Y Axis:\n        <select value={yAxis} onChange={handleYChange}>\n          {dataKeys.map(val => {\n            return (\n              <option key={`y-${val}`} value={val}>\n                {val}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n    </div>\n  );\n};\n\nexport default Options;\n","import React, { useEffect, useRef } from \"react\";\nimport {\n  select,\n  line,\n  curveCardinal,\n  axisBottom,\n  axisRight,\n  scaleLinear,\n  scaleBand,\n  max,\n  min\n} from \"d3\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst BarChart = () => {\n  let data = useSelector(state => state.cleanedData);\n  const xAxisSelection = useSelector(state => state.xAxis);\n  if (data) {\n    data = data.map(item => {\n      return item[xAxisSelection];\n    });\n  }\n  const svgRef = useRef();\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    if (!data) return;\n    const svg = select(svgRef.current);\n\n    // scales\n    const xScale = scaleBand()\n      .domain(data.map((value, index) => index))\n      .range([0, 300])\n      .padding(0.5);\n    const yScale = scaleLinear()\n      .domain([min(data), max(data)])\n      .range([150, 0]);\n\n    const colorScale = scaleLinear()\n      .domain([75, 100, 150])\n      .range([\"green\", \"orange\", \"red\"])\n      .clamp(true);\n\n    // create x-axis\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    svg\n      .select(\".x-axis\")\n      .style(\"transform\", \"translateY(150px)\")\n      .call(xAxis);\n\n    // create y-axis\n    const yAxis = axisRight(yScale);\n    svg\n      .select(\".y-axis\")\n      .style(\"transform\", \"translateX(300px)\")\n      .call(yAxis);\n\n    // draw the bars\n    svg\n      .selectAll(\".bar\")\n      .data(data)\n      .join(\"rect\")\n      .attr(\"class\", \"bar\")\n      .style(\"transform\", \"scale(1, -1)\")\n      .attr(\"x\", (value, index) => xScale(index))\n      .attr(\"y\", -150)\n      .attr(\"width\", xScale.bandwidth())\n      .on(\"mouseenter\", (value, index) => {\n        svg\n          .selectAll(\".tooltip\")\n          .data([value])\n          .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) - 4))\n          .attr(\"class\", \"tooltip\")\n          .text(value)\n          .attr(\"x\", xScale(index) + xScale.bandwidth() / 2)\n          .attr(\"text-anchor\", \"middle\")\n          .transition()\n          .attr(\"y\", yScale(value) - 8)\n          .attr(\"opacity\", 1);\n      })\n      .on(\"mouseleave\", () => svg.select(\".tooltip\").remove())\n      .transition()\n      .attr(\"fill\", colorScale)\n      .attr(\"height\", value => 150 - yScale(value));\n  }, [data]);\n\n  return (\n    <React.Fragment>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </React.Fragment>\n  );\n};\n\nexport default BarChart;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CSVReader from \"./components/csv/reader\";\nimport DataOptions from \"./components/data-options\";\nimport Visualization from \"./components/visualizations\";\n\nimport { Provider, useSelector, useDispatch } from \"react-redux\";\n\nimport { createStore } from \"redux\";\n\nconst rootReducer = (state = { xAxis: null, yAxis: null }, action: any) => {\n  switch (action.type) {\n    case \"SET_X_AXIS\":\n      return { ...state, xAxis: action.value };\n    case \"SET_Y_AXIS\":\n      return { ...state, yAxis: action.value };\n    case \"SET_CLEANED_DATA\":\n      return { ...state, cleanedData: action.value };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <CSVReader />\n        <DataOptions />\n        <Visualization />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}