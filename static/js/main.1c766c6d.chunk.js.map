{"version":3,"sources":["components/csv/reader.jsx","components/data-options/index.jsx","components/visualizations/constants.js","components/visualizations/index.jsx","components/visualizations/LinePath.jsx","components/visualizations/ScatterPlot.jsx","components/visualizations/hooks.js","App.js","serviceWorker.ts","index.tsx"],"names":["PARSER_OPTIONS","header","dynamicTyping","skipEmptyLines","Reader","props","mergeOptions","setData","cssClass","label","onFileLoaded","data","cleaned","errors","meta","cleanData","dataKeys","Object","keys","xAxis","yAxis","parserOptions","AxisSelection","value","options","onChange","map","val","key","Options","lineChart","event","target","name","type","MARGIN","top","right","bottom","left","TRANSFORM_X_AXIS","TRANSFORM_Y_AXIS","TRANSFORM_X_AXIS_LABLE","WIDTH","HEIGHT","DIMENSIONS","margin","width","height","FixedDimensionSvg","children","AxisLabels","className","transform","x","y","LinePath","xScale","yScale","xDomain","d3","d","yDomain","domain","lineGenerator","path","fill","stroke","strokeWidth","ScatterPlot","xAxisRef","useRef","yAxisRef","dimensions","range","xAxisComponent","scale","tickFormat","yAxisComponent","useEffect","current","call","useD3Scales","points","ref","i","cx","cy","r","style","sortedData","sort","a","b","renderLineChart","App","useState","visualizationOptions","setOptions","newOptions","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c766c6d.chunk.js","sourcesContent":["import React from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport \"./reader.css\";\n\nconst PARSER_OPTIONS = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true\n};\n\nconst cleanData = ({ data, errors, meta }) => {\n  return data;\n};\n\nconst Reader = props => {\n  const { mergeOptions, setData } = props;\n\n  const onCSVData = data => {\n    // For the time being, we're assuming there are at least\n    // two keys per line in the csv.\n    const cleaned = cleanData(data);\n    const dataKeys = Object.keys(cleaned[0]);\n    mergeOptions({\n      xAxis: dataKeys[0],\n      yAxis: dataKeys[1]\n    });\n    setData(cleaned);\n  };\n\n  return (\n    <CSVReader\n      cssClass=\"react-csv-input\"\n      label=\"Select a CSV File\"\n      onFileLoaded={onCSVData}\n      parserOptions={PARSER_OPTIONS}\n    />\n  );\n};\n\nexport default Reader;\n","import React from \"react\";\n\nconst AxisSelection = ({ label, value, options, onChange }) => {\n  return (\n    <label>\n      {label}\n      <select value={value} onChange={onChange}>\n        {options.map(val => {\n          return (\n            <option key={`label-${val}`} value={val}>\n              {val}\n            </option>\n          );\n        })}\n      </select>\n    </label>\n  );\n};\n\nconst Options = ({ data, options, onChange }) => {\n  const { xAxis, yAxis, lineChart } = options;\n\n  const dataKeys = Object.keys(data[0]);\n\n  const handleXChange = event => {\n    onChange({ xAxis: event.target.value });\n  };\n\n  const handleYChange = event => {\n    onChange({ yAxis: event.target.value });\n  };\n\n  const handleLineChartToggle = event => {\n    onChange({ lineChart: !lineChart });\n  };\n\n  return (\n    <div>\n      <AxisSelection\n        label=\"X Axis\"\n        value={xAxis}\n        options={dataKeys}\n        onChange={handleXChange}\n      />\n      <br />\n      <AxisSelection\n        label=\"Y Axis\"\n        value={yAxis}\n        options={dataKeys}\n        onChange={handleYChange}\n      />\n      <br />\n      <label>\n        Line Chart\n        <input\n          name=\"lineChart\"\n          type=\"checkbox\"\n          onChange={handleLineChartToggle}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Options;\n","const WIDTH = 800;\nconst HEIGHT = 600;\nconst MARGIN = { top: 20, right: 20, bottom: 60, left: 100 };\nexport const RED = \"#ff0000\";\nexport const TRANSFORM_X_AXIS = `translate(0, ${HEIGHT - MARGIN.bottom})`;\nexport const TRANSFORM_Y_AXIS = `translate(${MARGIN.left}, 0)`;\nexport const TRANSFORM_X_AXIS_LABLE = `translate(${WIDTH / 2}, ${HEIGHT - 10})`;\n\nexport const DIMENSIONS = {\n  margin: MARGIN,\n  width: WIDTH,\n  height: HEIGHT\n};\n","import React from \"react\";\nimport { DIMENSIONS, TRANSFORM_X_AXIS_LABLE } from \"./constants\";\nimport \"./index.css\";\n\nexport const FixedDimensionSvg = props => {\n  return (\n    <svg width={DIMENSIONS.width} height={DIMENSIONS.height}>\n      {props.children}\n    </svg>\n  );\n};\n\nexport const AxisLabels = props => {\n  const { xAxis, yAxis } = props;\n  return (\n    <>\n      <text className=\"axisLable\" transform={TRANSFORM_X_AXIS_LABLE}>\n        {xAxis}\n      </text>\n      <text\n        className=\"axisLable\"\n        transform=\"rotate(-90)\"\n        x={0 - DIMENSIONS.height / 2}\n        y={30}\n      >\n        {yAxis}\n      </text>\n    </>\n  );\n};\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { RED } from \"./constants\";\n\nconst LinePath = props => {\n  // Render a path calculated by d3.line, and scaled accordingly.\n  const { data, xAxis, yAxis, xScale, yScale } = props;\n\n  const xDomain = d3.extent(data, d => d[xAxis]);\n  const yDomain = d3.extent(data, d => d[yAxis]);\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  const lineGenerator = d3.line();\n  lineGenerator.x(d => xScale(d[xAxis]));\n  lineGenerator.y(d => yScale(d[yAxis]));\n  const path = lineGenerator(data);\n\n  return <path d={path} fill=\"none\" stroke={RED} strokeWidth=\"2\" />;\n};\n\nexport default LinePath;\n","import React, { useRef } from \"react\";\nimport * as d3 from \"d3\";\n\nimport { FixedDimensionSvg, AxisLabels } from \"./index\";\nimport { useD3Scales } from \"./hooks\";\nimport LinePath from \"./LinePath\";\nimport {\n  TRANSFORM_X_AXIS,\n  TRANSFORM_Y_AXIS,\n  RED,\n  DIMENSIONS\n} from \"./constants\";\n\nconst ScatterPlot = props => {\n  const { data, options } = props;\n  const { xAxis, yAxis, lineChart } = options;\n  const xAxisRef = useRef();\n  const yAxisRef = useRef();\n\n  const { xScale, yScale } = useD3Scales(xAxisRef, yAxisRef, data, DIMENSIONS);\n\n  let points = [];\n  if (data) {\n    const xDomain = d3.extent(data, d => d[xAxis]);\n    const yDomain = d3.extent(data, d => d[yAxis]);\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n\n    points = data.map(d => {\n      return {\n        x: xScale(d[xAxis]),\n        y: yScale(d[yAxis])\n      };\n    });\n  }\n\n  const renderLineChart = () => {\n    if (!lineChart) return null;\n    const sortedData = data\n      ? data.sort((a, b) => d3.ascending(a[xAxis], b[xAxis]))\n      : [];\n    return (\n      <LinePath\n        data={sortedData}\n        xAxis={xAxis}\n        yAxis={yAxis}\n        xScale={xScale}\n        yScale={yScale}\n      />\n    );\n  };\n\n  return (\n    <FixedDimensionSvg>\n      <g ref={xAxisRef} transform={TRANSFORM_X_AXIS} />\n      <g ref={yAxisRef} transform={TRANSFORM_Y_AXIS} />\n      <g>\n        {points.map((d, i) => {\n          return (\n            <circle key={i} cx={d.x} cy={d.y} r=\"3\" style={{ fill: RED }} />\n          );\n        })}\n      </g>\n      {renderLineChart()}\n      <AxisLabels xAxis={xAxis} yAxis={yAxis} />\n    </FixedDimensionSvg>\n  );\n};\n\nexport default ScatterPlot;\n","import { useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nexport function useD3Scales(xAxisRef, yAxisRef, data, dimensions) {\n  // Create linear scales from d3 api, and update when axis selection changes.\n  const { margin, width, height } = dimensions;\n  const xScale = d3.scaleLinear().range([margin.left, width - margin.right]);\n  const yScale = d3.scaleLinear().range([height - margin.bottom, margin.top]);\n  const xAxisComponent = d3\n    .axisBottom()\n    .scale(xScale)\n    .tickFormat(d => `${d}`);\n\n  const yAxisComponent = d3\n    .axisLeft()\n    .scale(yScale)\n    .tickFormat(d => `${d}`);\n\n  useEffect(() => {\n    d3.select(xAxisRef.current).call(xAxisComponent);\n    d3.select(yAxisRef.current).call(yAxisComponent);\n  }, [data, xAxisComponent, yAxisComponent, xAxisRef, yAxisRef]);\n\n  return { xScale, yScale };\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CSVReader from \"./components/csv/reader\";\nimport DataOptions from \"./components/data-options\";\nimport ScatterPlot from \"./components/visualizations/ScatterPlot\";\n\nconst App = () => {\n  const [visualizationOptions, setOptions] = useState(null);\n  const [data, setData] = useState(null);\n\n  const mergeOptions = options => {\n    const newOptions = {\n      ...visualizationOptions,\n      ...options\n    };\n    setOptions(newOptions);\n  };\n\n  return (\n    <div className=\"App\">\n      <CSVReader setData={setData} mergeOptions={mergeOptions} />\n      {data ? (\n        <div className=\"Viz-and-opts\">\n          <DataOptions\n            data={data}\n            onChange={mergeOptions}\n            options={visualizationOptions}\n          />\n          <ScatterPlot data={data} options={visualizationOptions} />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}