{"version":3,"sources":["components/csv/reader.jsx","components/data-options/index.jsx","components/visualizations/index.js","App.js","serviceWorker.ts","index.tsx"],"names":["PARSER_OPTIONS","header","dynamicTyping","skipEmptyLines","Reader","dispatch","useDispatch","className","cssClass","label","onFileLoaded","data","cleanedData","errors","meta","cleanData","dataKeys","Object","keys","type","value","parserOptions","Options","xAxis","useSelector","state","yAxis","console","log","length","onChange","event","target","map","val","key","MARGIN","TRANSFORM_X_AXIS","TRANSFORM_Y_AXIS","ScatterPlot","props","xAxisRef","useRef","yAxisRef","xScale","d3","range","yScale","xAxisComponent","scale","tickFormat","d","yAxisComponent","useEffect","current","call","points","xDomain","yDomain","domain","x","y","width","height","ref","transform","i","cx","cy","r","style","fill","store","createStore","action","AppInner","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea63c5e5.chunk.js","sourcesContent":["import React from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst PARSER_OPTIONS = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true\n};\n\nconst cleanData = ({ data, errors, meta }) => {\n  return data;\n};\n\nconst Reader = () => {\n  const dispatch = useDispatch();\n\n  const onCSVData = data => {\n    const cleanedData = cleanData(data);\n    const dataKeys = Object.keys(cleanedData[0]);\n    dispatch({ type: \"SET_X_AXIS\", value: dataKeys[0] });\n    dispatch({ type: \"SET_Y_AXIS\", value: dataKeys[1] });\n    dispatch({ type: \"SET_CLEANED_DATA\", value: cleanedData });\n  };\n\n  return (\n    <div className=\"container\">\n      <CSVReader\n        cssClass=\"react-csv-input\"\n        label=\"Select CSV with header\"\n        onFileLoaded={onCSVData}\n        parserOptions={PARSER_OPTIONS}\n      />\n    </div>\n  );\n};\n\nexport default Reader;\n","import React, { useContext, useState } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst Options = () => {\n  const xAxis = useSelector(state => state.xAxis);\n  const yAxis = useSelector(state => state.yAxis);\n  const dispatch = useDispatch();\n\n  const data = useSelector(state => state.cleanedData);\n\n  console.log(\"xAxis\", xAxis);\n  console.log(\"yAxis\", yAxis);\n\n  if (!data || !data.length) return null;\n  const dataKeys = Object.keys(data[0]);\n  console.log(\"dataKeys\", dataKeys);\n\n  const handleXChange = event => {\n    dispatch({ type: \"SET_X_AXIS\", value: event.target.value });\n  };\n\n  const handleYChange = event => {\n    dispatch({ type: \"SET_Y_AXIS\", value: event.target.value });\n  };\n\n  return (\n    <div>\n      <label>\n        X Axis:\n        <select value={xAxis} onChange={handleXChange}>\n          {dataKeys.map(val => {\n            return (\n              <option key={`x-${val}`} value={val}>\n                {val}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n      <br />\n      <label>\n        Y Axis:\n        <select value={yAxis} onChange={handleYChange}>\n          {dataKeys.map(val => {\n            return (\n              <option key={`y-${val}`} value={val}>\n                {val}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n    </div>\n  );\n};\n\nexport default Options;\n","import React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport * as d3 from \"d3\";\n\nconst WIDTH = 800;\nconst HEIGHT = 600;\nconst MARGIN = { top: 20, right: 20, bottom: 20, left: 55 };\nconst RED = \"#ff0000\";\nconst TRANSFORM_X_AXIS = `translate(0, ${HEIGHT - MARGIN.bottom})`;\nconst TRANSFORM_Y_AXIS = `translate(${MARGIN.left}, 0)`;\n\nexport const LineChart = props => {\n  const { data, xAxis, yAxis } = props;\n  const [path, setPath] = useState(null);\n  const xAxisRef = useRef();\n  const yAxisRef = useRef();\n\n  const xScale = d3.scaleLinear().range([MARGIN.left, WIDTH - MARGIN.right]);\n  const yScale = d3.scaleLinear().range([HEIGHT - MARGIN.bottom, MARGIN.top]);\n  const lineGenerator = d3.line();\n\n  const xAxisComponent = d3\n    .axisBottom()\n    .scale(xScale)\n    .tickFormat(d => `${d}`);\n\n  const yAxisComponent = d3\n    .axisLeft()\n    .scale(yScale)\n    .tickFormat(d => `${d}`);\n\n  useEffect(() => {\n    if (!data) return;\n    const xDomain = d3.extent(data, d => d[xAxis]);\n    const yMax = d3.max(data, d => d[yAxis]);\n    const yMin = d3.min(data, d => d[yAxis]);\n    xScale.domain(xDomain);\n    yScale.domain([yMin, yMax]);\n    lineGenerator.x(d => xScale(d[xAxis]));\n    lineGenerator.y(d => yScale(d[yAxis]));\n    setPath(lineGenerator(data));\n  }, [data, xAxis, yAxis, xScale, yScale, lineGenerator]);\n\n  useEffect(() => {\n    d3.select(xAxisRef.current).call(xAxisComponent);\n    d3.select(yAxisRef.current).call(yAxisComponent);\n  }, [data, xAxisComponent, yAxisComponent]);\n\n  return (\n    <svg width={WIDTH} height={HEIGHT}>\n      <path d={path} fill=\"none\" stroke={RED} strokeWidth=\"2\" />\n      {/* TODO: support multiple datasets for stacked line charts */}\n      <g>\n        <g ref={xAxisRef} transform={TRANSFORM_X_AXIS} />\n        <g ref={yAxisRef} transform={TRANSFORM_Y_AXIS} />\n      </g>\n    </svg>\n  );\n};\n\nexport const ScatterPlot = props => {\n  const { data, xAxis, yAxis } = props;\n  const xAxisRef = useRef();\n  const yAxisRef = useRef();\n\n  const xScale = d3.scaleLinear().range([MARGIN.left, WIDTH - MARGIN.right]);\n  const yScale = d3.scaleLinear().range([HEIGHT - MARGIN.bottom, MARGIN.top]);\n\n  const xAxisComponent = d3\n    .axisBottom()\n    .scale(xScale)\n    .tickFormat(d => `${d}`);\n\n  const yAxisComponent = d3\n    .axisLeft()\n    .scale(yScale)\n    .tickFormat(d => `${d}`);\n\n  useEffect(() => {\n    d3.select(xAxisRef.current).call(xAxisComponent);\n    d3.select(yAxisRef.current).call(yAxisComponent);\n  }, [data, xAxis, yAxis, xAxisComponent, yAxisComponent]);\n\n  let points = [];\n  if (data) {\n    const xDomain = d3.extent(data, d => d[xAxis]);\n    const yDomain = d3.extent(data, d => d[yAxis]);\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n\n    points = data.map(d => {\n      return {\n        x: xScale(d[xAxis]),\n        y: yScale(d[yAxis])\n      };\n    });\n  }\n\n  return (\n    <svg width={WIDTH} height={HEIGHT}>\n      <g ref={xAxisRef} transform={TRANSFORM_X_AXIS} />\n      <g ref={yAxisRef} transform={TRANSFORM_Y_AXIS} />\n      <g>\n        {points.map((d, i) => {\n          return (\n            <circle key={i} cx={d.x} cy={d.y} r=\"5\" style={{ fill: RED }} />\n          );\n        })}\n      </g>\n    </svg>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CSVReader from \"./components/csv/reader\";\nimport DataOptions from \"./components/data-options\";\nimport { LineChart, ScatterPlot } from \"./components/visualizations\";\n\nimport { Provider, useSelector, useDispatch } from \"react-redux\";\n\nimport { createStore } from \"redux\";\n\nconst rootReducer = (state = { xAxis: null, yAxis: null }, action) => {\n  switch (action.type) {\n    case \"SET_X_AXIS\":\n      return { ...state, xAxis: action.value };\n    case \"SET_Y_AXIS\":\n      return { ...state, yAxis: action.value };\n    case \"SET_CLEANED_DATA\":\n      return { ...state, cleanedData: action.value };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nconst AppInner = () => {\n  const data = useSelector(state => state.cleanedData);\n  const xAxis = useSelector(state => state.xAxis);\n  const yAxis = useSelector(state => state.yAxis);\n  return (\n    <div className=\"App\">\n      <CSVReader />\n      <DataOptions />\n      {/* <LineChart data={data} xAxis={xAxis} yAxis={yAxis} /> */}\n      <ScatterPlot data={data} xAxis={xAxis} yAxis={yAxis} />\n    </div>\n  );\n};\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <AppInner />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}